//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Controller
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Modelo;
    using ProyectoIDiseno.Controller;
    public class OperacionTPactado : AdministradorOperaciones
	{
        private static int PLAZO_MIN = 15;
        private static float MONTO_MIN_COL = 100000;
        private static float MONTO_MIN_DOL = 500;

        private CuentaFactory cuentaFactory = new CuentaFactory();

        public bool verificarCantidad(float pCantidad, float pMontoLimite) {
            return pCantidad >= pMontoLimite;
        }

        public bool verificarMontoColones(float pMonto, Moneda pMoneda) {
            return pMoneda == Moneda.Colon && verificarCantidad(pMonto, MONTO_MIN_COL);
        }

        public bool verificarMontoDolares(float pMonto, Moneda pMoneda) {
            return pMoneda == Moneda.Dolar && verificarCantidad(pMonto, MONTO_MIN_DOL);
        }

        public Cuenta crearCuenta(String pNombre, TipoCuenta pTipoCuenta, float pMonto, int pPeriodo, Moneda pMoneda)
        {
            return cuentaFactory.getCuenta(pNombre, pTipoCuenta, pMonto, pPeriodo, pMoneda);
        }

        public virtual bool revisarMinimo(float pMonto, int pDias, Moneda pMoneda)
        {
            if (verificarCantidad(pDias, PLAZO_MIN))
            {
                if (verificarMontoColones(pMonto, pMoneda))
                    return true;
                if (verificarMontoDolares(pMonto, pMoneda))
                    return true;
                return false;
            }
            else {
                Console.WriteLine("ERROR: Para crear una inversion pactada se necesita un minimo de " + PLAZO_MIN + " dias");
                return false;
            }
        }

        public Cuenta crearCuenta(TipoCuenta pTipo)
        {
            throw new NotImplementedException();
        }

        public bool revisarMinimo(string pNombre, TipoCuenta pTipoCuenta, float pMonto, int pPeriodo, Moneda pMoneda)
        {
            throw new NotImplementedException();
        }
    }
}

